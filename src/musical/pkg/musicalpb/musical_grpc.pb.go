// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: musical.proto

package musicalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicalServiceClient is the client API for MusicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicalServiceClient interface {
	GetArtist(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Artist, error)
	ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	GetAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Album, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	DeleteAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error)
	CreateTrack(ctx context.Context, opts ...grpc.CallOption) (MusicalService_CreateTrackClient, error)
	GetTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Track, error)
	UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Track, error)
	DeleteTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTracks(ctx context.Context, in *ListTracksRequest, opts ...grpc.CallOption) (*ListTracksResponse, error)
	DownloadTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (MusicalService_DownloadTrackClient, error)
	LikeArtist(ctx context.Context, in *LikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeArtist(ctx context.Context, in *UnlikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLikedArtists(ctx context.Context, in *GetLikedArtistsRequest, opts ...grpc.CallOption) (*GetLikedArtistsResponse, error)
	LikeTrack(ctx context.Context, in *LikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeTrack(ctx context.Context, in *UnlikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLikedTracks(ctx context.Context, in *GetLikedTracksRequest, opts ...grpc.CallOption) (*GetLikedTracksResponse, error)
}

type musicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicalServiceClient(cc grpc.ClientConnInterface) MusicalServiceClient {
	return &musicalServiceClient{cc}
}

func (c *musicalServiceClient) GetArtist(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/GetArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error) {
	out := new(ListArtistsResponse)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/ListArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) DeleteAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error) {
	out := new(ListAlbumsResponse)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/ListAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) CreateTrack(ctx context.Context, opts ...grpc.CallOption) (MusicalService_CreateTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicalService_ServiceDesc.Streams[0], "/musical.MusicalService/CreateTrack", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicalServiceCreateTrackClient{stream}
	return x, nil
}

type MusicalService_CreateTrackClient interface {
	Send(*CreateTrackRequest) error
	CloseAndRecv() (*Track, error)
	grpc.ClientStream
}

type musicalServiceCreateTrackClient struct {
	grpc.ClientStream
}

func (x *musicalServiceCreateTrackClient) Send(m *CreateTrackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *musicalServiceCreateTrackClient) CloseAndRecv() (*Track, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicalServiceClient) GetTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Track, error) {
	out := new(Track)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/GetTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Track, error) {
	out := new(Track)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/UpdateTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) DeleteTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/DeleteTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListTracks(ctx context.Context, in *ListTracksRequest, opts ...grpc.CallOption) (*ListTracksResponse, error) {
	out := new(ListTracksResponse)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/ListTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) DownloadTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (MusicalService_DownloadTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicalService_ServiceDesc.Streams[1], "/musical.MusicalService/DownloadTrack", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicalServiceDownloadTrackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MusicalService_DownloadTrackClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type musicalServiceDownloadTrackClient struct {
	grpc.ClientStream
}

func (x *musicalServiceDownloadTrackClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicalServiceClient) LikeArtist(ctx context.Context, in *LikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/LikeArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UnlikeArtist(ctx context.Context, in *UnlikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/UnlikeArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetLikedArtists(ctx context.Context, in *GetLikedArtistsRequest, opts ...grpc.CallOption) (*GetLikedArtistsResponse, error) {
	out := new(GetLikedArtistsResponse)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/GetLikedArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) LikeTrack(ctx context.Context, in *LikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/LikeTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UnlikeTrack(ctx context.Context, in *UnlikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/UnlikeTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetLikedTracks(ctx context.Context, in *GetLikedTracksRequest, opts ...grpc.CallOption) (*GetLikedTracksResponse, error) {
	out := new(GetLikedTracksResponse)
	err := c.cc.Invoke(ctx, "/musical.MusicalService/GetLikedTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicalServiceServer is the server API for MusicalService service.
// All implementations must embed UnimplementedMusicalServiceServer
// for forward compatibility
type MusicalServiceServer interface {
	GetArtist(context.Context, *IDRequest) (*Artist, error)
	ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error)
	CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error)
	GetAlbum(context.Context, *IDRequest) (*Album, error)
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error)
	DeleteAlbum(context.Context, *IDRequest) (*emptypb.Empty, error)
	ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error)
	CreateTrack(MusicalService_CreateTrackServer) error
	GetTrack(context.Context, *IDRequest) (*Track, error)
	UpdateTrack(context.Context, *UpdateTrackRequest) (*Track, error)
	DeleteTrack(context.Context, *IDRequest) (*emptypb.Empty, error)
	ListTracks(context.Context, *ListTracksRequest) (*ListTracksResponse, error)
	DownloadTrack(*IDRequest, MusicalService_DownloadTrackServer) error
	LikeArtist(context.Context, *LikeArtistRequest) (*emptypb.Empty, error)
	UnlikeArtist(context.Context, *UnlikeArtistRequest) (*emptypb.Empty, error)
	GetLikedArtists(context.Context, *GetLikedArtistsRequest) (*GetLikedArtistsResponse, error)
	LikeTrack(context.Context, *LikeTrackRequest) (*emptypb.Empty, error)
	UnlikeTrack(context.Context, *UnlikeTrackRequest) (*emptypb.Empty, error)
	GetLikedTracks(context.Context, *GetLikedTracksRequest) (*GetLikedTracksResponse, error)
	mustEmbedUnimplementedMusicalServiceServer()
}

// UnimplementedMusicalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicalServiceServer struct {
}

func (UnimplementedMusicalServiceServer) GetArtist(context.Context, *IDRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (UnimplementedMusicalServiceServer) ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtists not implemented")
}
func (UnimplementedMusicalServiceServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) GetAlbum(context.Context, *IDRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) DeleteAlbum(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedMusicalServiceServer) CreateTrack(MusicalService_CreateTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTrack not implemented")
}
func (UnimplementedMusicalServiceServer) GetTrack(context.Context, *IDRequest) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedMusicalServiceServer) UpdateTrack(context.Context, *UpdateTrackRequest) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (UnimplementedMusicalServiceServer) DeleteTrack(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedMusicalServiceServer) ListTracks(context.Context, *ListTracksRequest) (*ListTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracks not implemented")
}
func (UnimplementedMusicalServiceServer) DownloadTrack(*IDRequest, MusicalService_DownloadTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadTrack not implemented")
}
func (UnimplementedMusicalServiceServer) LikeArtist(context.Context, *LikeArtistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArtist not implemented")
}
func (UnimplementedMusicalServiceServer) UnlikeArtist(context.Context, *UnlikeArtistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeArtist not implemented")
}
func (UnimplementedMusicalServiceServer) GetLikedArtists(context.Context, *GetLikedArtistsRequest) (*GetLikedArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedArtists not implemented")
}
func (UnimplementedMusicalServiceServer) LikeTrack(context.Context, *LikeTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTrack not implemented")
}
func (UnimplementedMusicalServiceServer) UnlikeTrack(context.Context, *UnlikeTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTrack not implemented")
}
func (UnimplementedMusicalServiceServer) GetLikedTracks(context.Context, *GetLikedTracksRequest) (*GetLikedTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedTracks not implemented")
}
func (UnimplementedMusicalServiceServer) mustEmbedUnimplementedMusicalServiceServer() {}

// UnsafeMusicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicalServiceServer will
// result in compilation errors.
type UnsafeMusicalServiceServer interface {
	mustEmbedUnimplementedMusicalServiceServer()
}

func RegisterMusicalServiceServer(s grpc.ServiceRegistrar, srv MusicalServiceServer) {
	s.RegisterService(&MusicalService_ServiceDesc, srv)
}

func _MusicalService_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/GetArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetArtist(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/ListArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListArtists(ctx, req.(*ListArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetAlbum(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).DeleteAlbum(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/ListAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListAlbums(ctx, req.(*ListAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_CreateTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MusicalServiceServer).CreateTrack(&musicalServiceCreateTrackServer{stream})
}

type MusicalService_CreateTrackServer interface {
	SendAndClose(*Track) error
	Recv() (*CreateTrackRequest, error)
	grpc.ServerStream
}

type musicalServiceCreateTrackServer struct {
	grpc.ServerStream
}

func (x *musicalServiceCreateTrackServer) SendAndClose(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

func (x *musicalServiceCreateTrackServer) Recv() (*CreateTrackRequest, error) {
	m := new(CreateTrackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MusicalService_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetTrack(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/UpdateTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UpdateTrack(ctx, req.(*UpdateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/DeleteTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).DeleteTrack(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/ListTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListTracks(ctx, req.(*ListTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_DownloadTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicalServiceServer).DownloadTrack(m, &musicalServiceDownloadTrackServer{stream})
}

type MusicalService_DownloadTrackServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type musicalServiceDownloadTrackServer struct {
	grpc.ServerStream
}

func (x *musicalServiceDownloadTrackServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MusicalService_LikeArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).LikeArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/LikeArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).LikeArtist(ctx, req.(*LikeArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UnlikeArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UnlikeArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/UnlikeArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UnlikeArtist(ctx, req.(*UnlikeArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetLikedArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetLikedArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/GetLikedArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetLikedArtists(ctx, req.(*GetLikedArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_LikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).LikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/LikeTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).LikeTrack(ctx, req.(*LikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UnlikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UnlikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/UnlikeTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UnlikeTrack(ctx, req.(*UnlikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetLikedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetLikedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musical.MusicalService/GetLikedTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetLikedTracks(ctx, req.(*GetLikedTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicalService_ServiceDesc is the grpc.ServiceDesc for MusicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "musical.MusicalService",
	HandlerType: (*MusicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtist",
			Handler:    _MusicalService_GetArtist_Handler,
		},
		{
			MethodName: "ListArtists",
			Handler:    _MusicalService_ListArtists_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _MusicalService_CreateAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _MusicalService_GetAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _MusicalService_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _MusicalService_DeleteAlbum_Handler,
		},
		{
			MethodName: "ListAlbums",
			Handler:    _MusicalService_ListAlbums_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _MusicalService_GetTrack_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _MusicalService_UpdateTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _MusicalService_DeleteTrack_Handler,
		},
		{
			MethodName: "ListTracks",
			Handler:    _MusicalService_ListTracks_Handler,
		},
		{
			MethodName: "LikeArtist",
			Handler:    _MusicalService_LikeArtist_Handler,
		},
		{
			MethodName: "UnlikeArtist",
			Handler:    _MusicalService_UnlikeArtist_Handler,
		},
		{
			MethodName: "GetLikedArtists",
			Handler:    _MusicalService_GetLikedArtists_Handler,
		},
		{
			MethodName: "LikeTrack",
			Handler:    _MusicalService_LikeTrack_Handler,
		},
		{
			MethodName: "UnlikeTrack",
			Handler:    _MusicalService_UnlikeTrack_Handler,
		},
		{
			MethodName: "GetLikedTracks",
			Handler:    _MusicalService_GetLikedTracks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTrack",
			Handler:       _MusicalService_CreateTrack_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadTrack",
			Handler:       _MusicalService_DownloadTrack_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "musical.proto",
}
