// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: musical.proto

package musicalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MusicalService_GetArtist_FullMethodName       = "/musical.MusicalService/GetArtist"
	MusicalService_ListArtists_FullMethodName     = "/musical.MusicalService/ListArtists"
	MusicalService_CreateAlbum_FullMethodName     = "/musical.MusicalService/CreateAlbum"
	MusicalService_GetAlbum_FullMethodName        = "/musical.MusicalService/GetAlbum"
	MusicalService_UpdateAlbum_FullMethodName     = "/musical.MusicalService/UpdateAlbum"
	MusicalService_DeleteAlbum_FullMethodName     = "/musical.MusicalService/DeleteAlbum"
	MusicalService_ListAlbums_FullMethodName      = "/musical.MusicalService/ListAlbums"
	MusicalService_CreateTrack_FullMethodName     = "/musical.MusicalService/CreateTrack"
	MusicalService_GetTrack_FullMethodName        = "/musical.MusicalService/GetTrack"
	MusicalService_UpdateTrack_FullMethodName     = "/musical.MusicalService/UpdateTrack"
	MusicalService_DeleteTrack_FullMethodName     = "/musical.MusicalService/DeleteTrack"
	MusicalService_ListTracks_FullMethodName      = "/musical.MusicalService/ListTracks"
	MusicalService_LikeArtist_FullMethodName      = "/musical.MusicalService/LikeArtist"
	MusicalService_UnlikeArtist_FullMethodName    = "/musical.MusicalService/UnlikeArtist"
	MusicalService_GetLikedArtists_FullMethodName = "/musical.MusicalService/GetLikedArtists"
	MusicalService_LikeTrack_FullMethodName       = "/musical.MusicalService/LikeTrack"
	MusicalService_UnlikeTrack_FullMethodName     = "/musical.MusicalService/UnlikeTrack"
	MusicalService_GetLikedTracks_FullMethodName  = "/musical.MusicalService/GetLikedTracks"
)

// MusicalServiceClient is the client API for MusicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicalServiceClient interface {
	// Artists CRUD
	GetArtist(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Artist, error)
	ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error)
	// Albums CRUD
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	GetAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Album, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	DeleteAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error)
	// Tracks CRUD
	CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*Track, error)
	GetTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Track, error)
	UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Track, error)
	DeleteTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTracks(ctx context.Context, in *ListTracksRequest, opts ...grpc.CallOption) (*ListTracksResponse, error)
	// Likes operations
	LikeArtist(ctx context.Context, in *LikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeArtist(ctx context.Context, in *UnlikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLikedArtists(ctx context.Context, in *GetLikedArtistsRequest, opts ...grpc.CallOption) (*GetLikedArtistsResponse, error)
	LikeTrack(ctx context.Context, in *LikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeTrack(ctx context.Context, in *UnlikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLikedTracks(ctx context.Context, in *GetLikedTracksRequest, opts ...grpc.CallOption) (*GetLikedTracksResponse, error)
}

type musicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicalServiceClient(cc grpc.ClientConnInterface) MusicalServiceClient {
	return &musicalServiceClient{cc}
}

func (c *musicalServiceClient) GetArtist(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Artist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Artist)
	err := c.cc.Invoke(ctx, MusicalService_GetArtist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArtistsResponse)
	err := c.cc.Invoke(ctx, MusicalService_ListArtists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, MusicalService_CreateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, MusicalService_GetAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, MusicalService_UpdateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) DeleteAlbum(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_DeleteAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAlbumsResponse)
	err := c.cc.Invoke(ctx, MusicalService_ListAlbums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*Track, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Track)
	err := c.cc.Invoke(ctx, MusicalService_CreateTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Track, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Track)
	err := c.cc.Invoke(ctx, MusicalService_GetTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Track, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Track)
	err := c.cc.Invoke(ctx, MusicalService_UpdateTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) DeleteTrack(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_DeleteTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) ListTracks(ctx context.Context, in *ListTracksRequest, opts ...grpc.CallOption) (*ListTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTracksResponse)
	err := c.cc.Invoke(ctx, MusicalService_ListTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) LikeArtist(ctx context.Context, in *LikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_LikeArtist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UnlikeArtist(ctx context.Context, in *UnlikeArtistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_UnlikeArtist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetLikedArtists(ctx context.Context, in *GetLikedArtistsRequest, opts ...grpc.CallOption) (*GetLikedArtistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedArtistsResponse)
	err := c.cc.Invoke(ctx, MusicalService_GetLikedArtists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) LikeTrack(ctx context.Context, in *LikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_LikeTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) UnlikeTrack(ctx context.Context, in *UnlikeTrackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MusicalService_UnlikeTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicalServiceClient) GetLikedTracks(ctx context.Context, in *GetLikedTracksRequest, opts ...grpc.CallOption) (*GetLikedTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedTracksResponse)
	err := c.cc.Invoke(ctx, MusicalService_GetLikedTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicalServiceServer is the server API for MusicalService service.
// All implementations must embed UnimplementedMusicalServiceServer
// for forward compatibility.
type MusicalServiceServer interface {
	// Artists CRUD
	GetArtist(context.Context, *IDRequest) (*Artist, error)
	ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error)
	// Albums CRUD
	CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error)
	GetAlbum(context.Context, *IDRequest) (*Album, error)
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error)
	DeleteAlbum(context.Context, *IDRequest) (*emptypb.Empty, error)
	ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error)
	// Tracks CRUD
	CreateTrack(context.Context, *CreateTrackRequest) (*Track, error)
	GetTrack(context.Context, *IDRequest) (*Track, error)
	UpdateTrack(context.Context, *UpdateTrackRequest) (*Track, error)
	DeleteTrack(context.Context, *IDRequest) (*emptypb.Empty, error)
	ListTracks(context.Context, *ListTracksRequest) (*ListTracksResponse, error)
	// Likes operations
	LikeArtist(context.Context, *LikeArtistRequest) (*emptypb.Empty, error)
	UnlikeArtist(context.Context, *UnlikeArtistRequest) (*emptypb.Empty, error)
	GetLikedArtists(context.Context, *GetLikedArtistsRequest) (*GetLikedArtistsResponse, error)
	LikeTrack(context.Context, *LikeTrackRequest) (*emptypb.Empty, error)
	UnlikeTrack(context.Context, *UnlikeTrackRequest) (*emptypb.Empty, error)
	GetLikedTracks(context.Context, *GetLikedTracksRequest) (*GetLikedTracksResponse, error)
	mustEmbedUnimplementedMusicalServiceServer()
}

// UnimplementedMusicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMusicalServiceServer struct{}

func (UnimplementedMusicalServiceServer) GetArtist(context.Context, *IDRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (UnimplementedMusicalServiceServer) ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtists not implemented")
}
func (UnimplementedMusicalServiceServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) GetAlbum(context.Context, *IDRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) DeleteAlbum(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedMusicalServiceServer) ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedMusicalServiceServer) CreateTrack(context.Context, *CreateTrackRequest) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrack not implemented")
}
func (UnimplementedMusicalServiceServer) GetTrack(context.Context, *IDRequest) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedMusicalServiceServer) UpdateTrack(context.Context, *UpdateTrackRequest) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (UnimplementedMusicalServiceServer) DeleteTrack(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedMusicalServiceServer) ListTracks(context.Context, *ListTracksRequest) (*ListTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracks not implemented")
}
func (UnimplementedMusicalServiceServer) LikeArtist(context.Context, *LikeArtistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArtist not implemented")
}
func (UnimplementedMusicalServiceServer) UnlikeArtist(context.Context, *UnlikeArtistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeArtist not implemented")
}
func (UnimplementedMusicalServiceServer) GetLikedArtists(context.Context, *GetLikedArtistsRequest) (*GetLikedArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedArtists not implemented")
}
func (UnimplementedMusicalServiceServer) LikeTrack(context.Context, *LikeTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTrack not implemented")
}
func (UnimplementedMusicalServiceServer) UnlikeTrack(context.Context, *UnlikeTrackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTrack not implemented")
}
func (UnimplementedMusicalServiceServer) GetLikedTracks(context.Context, *GetLikedTracksRequest) (*GetLikedTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedTracks not implemented")
}
func (UnimplementedMusicalServiceServer) mustEmbedUnimplementedMusicalServiceServer() {}
func (UnimplementedMusicalServiceServer) testEmbeddedByValue()                        {}

// UnsafeMusicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicalServiceServer will
// result in compilation errors.
type UnsafeMusicalServiceServer interface {
	mustEmbedUnimplementedMusicalServiceServer()
}

func RegisterMusicalServiceServer(s grpc.ServiceRegistrar, srv MusicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedMusicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MusicalService_ServiceDesc, srv)
}

func _MusicalService_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_GetArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetArtist(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_ListArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListArtists(ctx, req.(*ListArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetAlbum(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_UpdateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_DeleteAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).DeleteAlbum(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_ListAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListAlbums(ctx, req.(*ListAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_CreateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).CreateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_CreateTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).CreateTrack(ctx, req.(*CreateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_GetTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetTrack(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_UpdateTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UpdateTrack(ctx, req.(*UpdateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_DeleteTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).DeleteTrack(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_ListTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).ListTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_ListTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).ListTracks(ctx, req.(*ListTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_LikeArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).LikeArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_LikeArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).LikeArtist(ctx, req.(*LikeArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UnlikeArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UnlikeArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_UnlikeArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UnlikeArtist(ctx, req.(*UnlikeArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetLikedArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetLikedArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_GetLikedArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetLikedArtists(ctx, req.(*GetLikedArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_LikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).LikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_LikeTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).LikeTrack(ctx, req.(*LikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_UnlikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).UnlikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_UnlikeTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).UnlikeTrack(ctx, req.(*UnlikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicalService_GetLikedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicalServiceServer).GetLikedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicalService_GetLikedTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicalServiceServer).GetLikedTracks(ctx, req.(*GetLikedTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicalService_ServiceDesc is the grpc.ServiceDesc for MusicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "musical.MusicalService",
	HandlerType: (*MusicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtist",
			Handler:    _MusicalService_GetArtist_Handler,
		},
		{
			MethodName: "ListArtists",
			Handler:    _MusicalService_ListArtists_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _MusicalService_CreateAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _MusicalService_GetAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _MusicalService_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _MusicalService_DeleteAlbum_Handler,
		},
		{
			MethodName: "ListAlbums",
			Handler:    _MusicalService_ListAlbums_Handler,
		},
		{
			MethodName: "CreateTrack",
			Handler:    _MusicalService_CreateTrack_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _MusicalService_GetTrack_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _MusicalService_UpdateTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _MusicalService_DeleteTrack_Handler,
		},
		{
			MethodName: "ListTracks",
			Handler:    _MusicalService_ListTracks_Handler,
		},
		{
			MethodName: "LikeArtist",
			Handler:    _MusicalService_LikeArtist_Handler,
		},
		{
			MethodName: "UnlikeArtist",
			Handler:    _MusicalService_UnlikeArtist_Handler,
		},
		{
			MethodName: "GetLikedArtists",
			Handler:    _MusicalService_GetLikedArtists_Handler,
		},
		{
			MethodName: "LikeTrack",
			Handler:    _MusicalService_LikeTrack_Handler,
		},
		{
			MethodName: "UnlikeTrack",
			Handler:    _MusicalService_UnlikeTrack_Handler,
		},
		{
			MethodName: "GetLikedTracks",
			Handler:    _MusicalService_GetLikedTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musical.proto",
}
