// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: musical.proto

package musicalpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDRequest) Reset() {
	*x = IDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDRequest) ProtoMessage() {}

func (x *IDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDRequest.ProtoReflect.Descriptor instead.
func (*IDRequest) Descriptor() ([]byte, []int) {
	return file_musical_proto_rawDescGZIP(), []int{0}
}

func (x *IDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_musical_proto protoreflect.FileDescriptor

var file_musical_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x1a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xd9, 0x09, 0x0a, 0x0e, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x12, 0x2e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x3a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x12, 0x1b, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x39, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x12, 0x2e, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1b,
	0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x28, 0x01, 0x12, 0x2e, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x44, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x4c,
	0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x55,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x54, 0x65, 0x6f, 0x50, 0x6c, 0x6f, 0x77, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_musical_proto_rawDescOnce sync.Once
	file_musical_proto_rawDescData = file_musical_proto_rawDesc
)

func file_musical_proto_rawDescGZIP() []byte {
	file_musical_proto_rawDescOnce.Do(func() {
		file_musical_proto_rawDescData = protoimpl.X.CompressGZIP(file_musical_proto_rawDescData)
	})
	return file_musical_proto_rawDescData
}

var file_musical_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_musical_proto_goTypes = []interface{}{
	(*IDRequest)(nil),               // 0: musical.IDRequest
	(*ListArtistsRequest)(nil),      // 1: musical.ListArtistsRequest
	(*CreateAlbumRequest)(nil),      // 2: musical.CreateAlbumRequest
	(*UpdateAlbumRequest)(nil),      // 3: musical.UpdateAlbumRequest
	(*ListAlbumsRequest)(nil),       // 4: musical.ListAlbumsRequest
	(*CreateTrackRequest)(nil),      // 5: musical.CreateTrackRequest
	(*UpdateTrackRequest)(nil),      // 6: musical.UpdateTrackRequest
	(*ListTracksRequest)(nil),       // 7: musical.ListTracksRequest
	(*LikeArtistRequest)(nil),       // 8: musical.LikeArtistRequest
	(*UnlikeArtistRequest)(nil),     // 9: musical.UnlikeArtistRequest
	(*GetLikedArtistsRequest)(nil),  // 10: musical.GetLikedArtistsRequest
	(*LikeTrackRequest)(nil),        // 11: musical.LikeTrackRequest
	(*UnlikeTrackRequest)(nil),      // 12: musical.UnlikeTrackRequest
	(*GetLikedTracksRequest)(nil),   // 13: musical.GetLikedTracksRequest
	(*Artist)(nil),                  // 14: musical.Artist
	(*ListArtistsResponse)(nil),     // 15: musical.ListArtistsResponse
	(*Album)(nil),                   // 16: musical.Album
	(*emptypb.Empty)(nil),           // 17: google.protobuf.Empty
	(*ListAlbumsResponse)(nil),      // 18: musical.ListAlbumsResponse
	(*Track)(nil),                   // 19: musical.Track
	(*ListTracksResponse)(nil),      // 20: musical.ListTracksResponse
	(*DownloadResponse)(nil),        // 21: musical.DownloadResponse
	(*GetLikedArtistsResponse)(nil), // 22: musical.GetLikedArtistsResponse
	(*GetLikedTracksResponse)(nil),  // 23: musical.GetLikedTracksResponse
}
var file_musical_proto_depIdxs = []int32{
	0,  // 0: musical.MusicalService.GetArtist:input_type -> musical.IDRequest
	1,  // 1: musical.MusicalService.ListArtists:input_type -> musical.ListArtistsRequest
	2,  // 2: musical.MusicalService.CreateAlbum:input_type -> musical.CreateAlbumRequest
	0,  // 3: musical.MusicalService.GetAlbum:input_type -> musical.IDRequest
	3,  // 4: musical.MusicalService.UpdateAlbum:input_type -> musical.UpdateAlbumRequest
	0,  // 5: musical.MusicalService.DeleteAlbum:input_type -> musical.IDRequest
	4,  // 6: musical.MusicalService.ListAlbums:input_type -> musical.ListAlbumsRequest
	5,  // 7: musical.MusicalService.CreateTrack:input_type -> musical.CreateTrackRequest
	0,  // 8: musical.MusicalService.GetTrack:input_type -> musical.IDRequest
	6,  // 9: musical.MusicalService.UpdateTrack:input_type -> musical.UpdateTrackRequest
	0,  // 10: musical.MusicalService.DeleteTrack:input_type -> musical.IDRequest
	7,  // 11: musical.MusicalService.ListTracks:input_type -> musical.ListTracksRequest
	0,  // 12: musical.MusicalService.DownloadTrack:input_type -> musical.IDRequest
	8,  // 13: musical.MusicalService.LikeArtist:input_type -> musical.LikeArtistRequest
	9,  // 14: musical.MusicalService.UnlikeArtist:input_type -> musical.UnlikeArtistRequest
	10, // 15: musical.MusicalService.GetLikedArtists:input_type -> musical.GetLikedArtistsRequest
	11, // 16: musical.MusicalService.LikeTrack:input_type -> musical.LikeTrackRequest
	12, // 17: musical.MusicalService.UnlikeTrack:input_type -> musical.UnlikeTrackRequest
	13, // 18: musical.MusicalService.GetLikedTracks:input_type -> musical.GetLikedTracksRequest
	14, // 19: musical.MusicalService.GetArtist:output_type -> musical.Artist
	15, // 20: musical.MusicalService.ListArtists:output_type -> musical.ListArtistsResponse
	16, // 21: musical.MusicalService.CreateAlbum:output_type -> musical.Album
	16, // 22: musical.MusicalService.GetAlbum:output_type -> musical.Album
	16, // 23: musical.MusicalService.UpdateAlbum:output_type -> musical.Album
	17, // 24: musical.MusicalService.DeleteAlbum:output_type -> google.protobuf.Empty
	18, // 25: musical.MusicalService.ListAlbums:output_type -> musical.ListAlbumsResponse
	19, // 26: musical.MusicalService.CreateTrack:output_type -> musical.Track
	19, // 27: musical.MusicalService.GetTrack:output_type -> musical.Track
	19, // 28: musical.MusicalService.UpdateTrack:output_type -> musical.Track
	17, // 29: musical.MusicalService.DeleteTrack:output_type -> google.protobuf.Empty
	20, // 30: musical.MusicalService.ListTracks:output_type -> musical.ListTracksResponse
	21, // 31: musical.MusicalService.DownloadTrack:output_type -> musical.DownloadResponse
	17, // 32: musical.MusicalService.LikeArtist:output_type -> google.protobuf.Empty
	17, // 33: musical.MusicalService.UnlikeArtist:output_type -> google.protobuf.Empty
	22, // 34: musical.MusicalService.GetLikedArtists:output_type -> musical.GetLikedArtistsResponse
	17, // 35: musical.MusicalService.LikeTrack:output_type -> google.protobuf.Empty
	17, // 36: musical.MusicalService.UnlikeTrack:output_type -> google.protobuf.Empty
	23, // 37: musical.MusicalService.GetLikedTracks:output_type -> musical.GetLikedTracksResponse
	19, // [19:38] is the sub-list for method output_type
	0,  // [0:19] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_musical_proto_init() }
func file_musical_proto_init() {
	if File_musical_proto != nil {
		return
	}
	file_album_proto_init()
	file_artist_proto_init()
	file_like_proto_init()
	file_track_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_musical_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_musical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_musical_proto_goTypes,
		DependencyIndexes: file_musical_proto_depIdxs,
		MessageInfos:      file_musical_proto_msgTypes,
	}.Build()
	File_musical_proto = out.File
	file_musical_proto_rawDesc = nil
	file_musical_proto_goTypes = nil
	file_musical_proto_depIdxs = nil
}
