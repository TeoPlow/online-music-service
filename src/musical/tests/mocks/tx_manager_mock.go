// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TeoPlow/online-music-service/src/musical/internal/domain (interfaces: TxManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// RunReadUncommited mocks base method.
func (m *MockTxManager) RunReadUncommited(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadUncommited", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadUncommited indicates an expected call of RunReadUncommited.
func (mr *MockTxManagerMockRecorder) RunReadUncommited(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadUncommited", reflect.TypeOf((*MockTxManager)(nil).RunReadUncommited), arg0, arg1)
}

// RunSerializable mocks base method.
func (m *MockTxManager) RunSerializable(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSerializable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSerializable indicates an expected call of RunSerializable.
func (mr *MockTxManagerMockRecorder) RunSerializable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSerializable", reflect.TypeOf((*MockTxManager)(nil).RunSerializable), arg0, arg1)
}
