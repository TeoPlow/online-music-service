// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TeoPlow/online-music-service/src/musical/internal/domain (interfaces: ArtistClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/TeoPlow/online-music-service/src/musical/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockArtistClient is a mock of ArtistClient interface.
type MockArtistClient struct {
	ctrl     *gomock.Controller
	recorder *MockArtistClientMockRecorder
}

// MockArtistClientMockRecorder is the mock recorder for MockArtistClient.
type MockArtistClientMockRecorder struct {
	mock *MockArtistClient
}

// NewMockArtistClient creates a new mock instance.
func NewMockArtistClient(ctrl *gomock.Controller) *MockArtistClient {
	mock := &MockArtistClient{ctrl: ctrl}
	mock.recorder = &MockArtistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistClient) EXPECT() *MockArtistClientMockRecorder {
	return m.recorder
}

// GetArtist mocks base method.
func (m *MockArtistClient) GetArtist(arg0 context.Context, arg1 uuid.UUID) (models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtist", arg0, arg1)
	ret0, _ := ret[0].(models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtist indicates an expected call of GetArtist.
func (mr *MockArtistClientMockRecorder) GetArtist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtist", reflect.TypeOf((*MockArtistClient)(nil).GetArtist), arg0, arg1)
}
