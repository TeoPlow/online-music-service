// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TeoPlow/online-music-service/src/musical/internal/domain (interfaces: StreamingClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStreamingClient is a mock of StreamingClient interface.
type MockStreamingClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingClientMockRecorder
}

// MockStreamingClientMockRecorder is the mock recorder for MockStreamingClient.
type MockStreamingClientMockRecorder struct {
	mock *MockStreamingClient
}

// NewMockStreamingClient creates a new mock instance.
func NewMockStreamingClient(ctrl *gomock.Controller) *MockStreamingClient {
	mock := &MockStreamingClient{ctrl: ctrl}
	mock.recorder = &MockStreamingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingClient) EXPECT() *MockStreamingClientMockRecorder {
	return m.recorder
}

// DeleteTrack mocks base method.
func (m *MockStreamingClient) DeleteTrack(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack.
func (mr *MockStreamingClientMockRecorder) DeleteTrack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockStreamingClient)(nil).DeleteTrack), arg0, arg1)
}

// SaveTrack mocks base method.
func (m *MockStreamingClient) SaveTrack(arg0 context.Context, arg1 uuid.UUID, arg2 *bytes.Buffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrack indicates an expected call of SaveTrack.
func (mr *MockStreamingClientMockRecorder) SaveTrack(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrack", reflect.TypeOf((*MockStreamingClient)(nil).SaveTrack), arg0, arg1, arg2)
}
